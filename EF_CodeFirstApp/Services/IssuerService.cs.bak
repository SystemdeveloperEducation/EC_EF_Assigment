using EF_CodeFirstApp.Context;
using EF_CodeFirstApp.Models.Entities;
using EF_CodeFirstApp.Models.Forms;
using Microsoft.EntityFrameworkCore;

namespace EF_CodeFirstApp.Services;

internal class IssuerService
{
    private readonly DataContext _context = null!;
    // private readonly CategoryService _categoryService = null!;

    public async Task<IEnumerable<IssuersEntity>> GetallAsync()
    {
        // Includes the Category property in the query
        // This is a join query
        return await _context.Issuers.Include(x => x.Role).ToListAsync();
    }

    public async Task<IssuersEntity> GetAsync(string email)
    {
        var issuersEntity = await _context.Issuers.Include(x => x.Role).FirstOrDefaultAsync(x => x.Email == email);
        if (issuersEntity != null)
            return issuersEntity;

        return null!;
    }

    public async Task<IssuersEntity> CreateAsync(IssuerRegistrationForm issuerRegistrationForm)
    {
        if (await _context.Issuers.AnyAsync(x => x.Email == issuerRegistrationForm.Email))
            return null!;

        var IssuersEntity = new IssuersEntity
        {
            FirstName = issuerRegistrationForm.FirstName,
            LastName = issuerRegistrationForm.LastName,
            Email = issuerRegistrationForm.Email,
            PhoneNumber = issuerRegistrationForm.PhoneNumber,
            RoleId = (await _categoryService.GetOrCreateIfNotExistsAsync(issuerRegistrationForm.RoleName)).Id,
            // CategoryId = (await _categoryService.GetOrCreateIfNotExistsAsync(productRegistrationForm.CategoryName)).Id,
        };

        _context.Add(IssuersEntity);
        await _context.SaveChangesAsync();
        return IssuersEntity;
    }

    public async Task DeleteAsync(string email)
    {
        // This is one way to do it
        //var IssuersEntity = await getAsync(articleNumber);

        var issuersEntity = await _context.Issuers.FirstOrDefaultAsync(x => x.Email == email);
        if (issuersEntity != null)
        {
            _context.Issuers.Remove(issuersEntity);
            await _context.SaveChangesAsync();
        }
    }
}
